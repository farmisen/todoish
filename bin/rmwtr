#!/usr/bin/env bash
set -euo pipefail

# Script to cleanup a git worktree after PR is merged
# Usage: ./rmwtr

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Functions
print_error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_info() {
    echo -e "${YELLOW}→ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

get_git_root() {
    git rev-parse --show-toplevel 2>/dev/null || {
        print_error "Not in a git repository"
        exit 1
    }
}

is_worktree() {
    # Check if current directory is a git worktree (not the main worktree)
    local git_dir
    git_dir=$(git rev-parse --git-dir 2>/dev/null)
    
    if [[ "$git_dir" == *".git/worktrees/"* ]]; then
        return 0
    else
        return 1
    fi
}

get_main_worktree_path() {
    # Get the path to the main worktree
    local git_common_dir
    git_common_dir=$(git rev-parse --git-common-dir 2>/dev/null)
    
    # The main worktree is the parent of .git directory
    dirname "$git_common_dir"
}

check_uncommitted_changes() {
    if ! git diff --quiet || ! git diff --cached --quiet; then
        return 0  # Has uncommitted changes
    else
        return 1  # No uncommitted changes
    fi
}

is_branch_merged() {
    local branch="$1"
    local base_branch="${2:-main}"
    
    # Fetch latest changes
    git fetch origin "$base_branch" >/dev/null 2>&1
    
    # Check if all commits from branch are in base_branch
    local unmerged_commits
    unmerged_commits=$(git rev-list --count "origin/$base_branch".."$branch" 2>/dev/null || echo "unknown")
    
    if [ "$unmerged_commits" = "0" ]; then
        return 0  # Branch is merged
    else
        return 1  # Branch is not merged
    fi
}

# Main script
main() {
    # Check if we're in a worktree
    if ! is_worktree; then
        print_error "Current directory is not a git worktree"
        print_info "This script should be run from within a git worktree directory"
        exit 1
    fi

    # Get current directory and branch
    local current_dir
    current_dir=$(pwd)
    
    local current_branch
    current_branch=$(git branch --show-current)
    
    if [ -z "$current_branch" ]; then
        print_error "Could not determine current branch"
        exit 1
    fi

    print_info "Current worktree: $(basename "$current_dir")"
    print_info "Current branch: $current_branch"

    # Check for uncommitted changes
    if check_uncommitted_changes; then
        print_warning "You have uncommitted changes in this worktree"
        read -p "Do you want to proceed anyway? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Cleanup cancelled"
            exit 0
        fi
    fi

    # Check if branch is merged
    local branch_merged=false
    if is_branch_merged "$current_branch"; then
        print_success "Branch $current_branch has been merged to main"
        branch_merged=true
    else
        print_warning "Branch $current_branch has NOT been merged to main"
        read -p "Do you want to remove the worktree anyway? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Cleanup cancelled"
            exit 0
        fi
    fi

    # Get main worktree path
    local main_worktree
    main_worktree=$(get_main_worktree_path)
    
    print_info "Navigating to main repository..."
    cd "$main_worktree"
    
    # Remove the worktree
    print_info "Removing worktree at $current_dir..."
    if git worktree remove "$current_dir" 2>/dev/null; then
        print_success "Worktree removed successfully"
    else
        # Force removal if normal removal fails
        print_warning "Normal removal failed, trying force removal..."
        if git worktree remove --force "$current_dir"; then
            print_success "Worktree forcefully removed"
        else
            print_error "Failed to remove worktree"
            exit 1
        fi
    fi

    # Ask about deleting remote branch if it was merged
    if [ "$branch_merged" = true ]; then
        read -p "Do you want to delete the remote branch '$current_branch'? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            print_info "Deleting remote branch..."
            if git push origin --delete "$current_branch" 2>/dev/null; then
                print_success "Remote branch deleted"
            else
                print_warning "Could not delete remote branch (it may not exist or you may lack permissions)"
            fi
        fi
    fi

    # Clean up any prunable worktrees
    print_info "Pruning worktree list..."
    git worktree prune
    
    print_success "Cleanup completed!"
    print_info "You are now in the main repository at: $main_worktree"
}

# Parse command line options
DRY_RUN=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [--dry-run]"
            echo "  --dry-run    Show what would be done without actually doing it"
            echo "  -h, --help   Show this help message"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

if [ "$DRY_RUN" = true ]; then
    print_warning "DRY RUN MODE - No changes will be made"
fi

# Run main function
main